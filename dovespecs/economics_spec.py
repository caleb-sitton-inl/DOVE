# Copyright 2024, Battelle Energy Alliance, LLC
# ALL RIGHTS RESERVED
"""
Economics Input Specification
"""
from ravenframework.utils import InputData
from ravenframework.utils.InputData import InputTypes, ParameterInput, Quantity, parameterInputFactory, parseFromList
import xml.etree.ElementTree as ET

from .autospec import AutoSpec

class EconomicSpec(AutoSpec):
  """ """
  @classmethod
  def getInputSpecification(cls) -> type[AutoSpec]:
    """"""
    cls.createClass(
      "economics",
      ordered=False,
      baseNode=None,
      descr=r"""
      this node is where all the economic information about this component is placed.
      """,
    )

    cls.addParam(
      "lifetime",
      param_type=InputTypes.IntegerType, # type: ignore
      required=False,
      default="100",
      descr=r"""
      indicates the number of \emph{cycles} (often \emph{years}) this
      unit is expected to operate before replacement. Replacement is
      represented as overnight capital cost in the year the component
      is replaced.
      """,
    )

    cls.addSub(CashFlowSpec.getInputSpecification())

    return cls


class CashFlowSpec(AutoSpec):
  """ """
  @classmethod
  def getInputSpecification(cls) -> type[AutoSpec]:
    """"""
    cls.createClass(
      "CashFlow",
      descr=r"""
      node for defining a CashFlow for a particular Component.
      This HERON CashFlow will be used to generate a TEAL CashFlow from
      RAVEN's TEAL plugin. Note a CashFlow generally takes the form
      $C = \alpha \left(\frac{D}{D'}\right)^x$, aggregated depending on
      the \xmlAttr{type}. For more information, see the TEAL plugin for
      RAVEN.
      """
    )

    cls.addParam(
      "name",
      param_type=InputTypes.StringType,
      required=True,
      descr=r"""
      the name by which this CashFlow will be identified as
      part of this component. The general name is prefixed by the component
      name, such as ComponentName$\vert$CashFlowName.
      """,
    )

    cls.addParam(
      "type",
      param_type=InputTypes.makeEnumType("CFType", "CFType", ["one-time", "repeating"]), #type: ignore
      required=True,
      descr=r"""
      the type of CashFlow to calculate. \xmlString{one-time}
      is suitable for capital expenditure CashFlows, while \xmlString{repeating}
      is used for repeating costs such as operations and maintenance
      (fixed or variable), market sales, or similar.
      """,
    )

    cls.addParam(
      "taxable",
      param_type=InputTypes.BoolType, #type: ignore
      required=False,
      default="True",
      descr=r"""determines whether this CashFlow is taxed every cycle.""",
    )

    cls.addParam(
      "inflation",
      param_type=InputTypes.StringType,
      required=False,
      default="none", # type: ignore
      descr=r"""determines how inflation affects this CashFlow every cycle.
                See the CashFlow submodule of RAVEN.""",
    )

    cls.addParam(
      "npv_exempt",
      param_type=InputTypes.BoolType, #type: ignore
      required=False,
      default="False",
      descr=r"""indicates whether this CashFlow should be exempt from
                Net Present Value (NPV) calculations. Setting this parameter to
                ``True'' will allow the CashFlow to be used within the dispatch
                optimization, but will be left out of the finanical computations.
                Thus, users can leverage this feature to motivate the dispatch
                optimization without affecting the financial results. \WARNING{WARNING}:
                this is an advanced feature that changes the interpretations of
                the results typically generated by HERON. Use with caution!""",
    )

    cls.addParam(
      "period",
      param_type=InputTypes.makeEnumType("period_opts", "period_opts", ["hour", "year"]), #type: ignore
      required=False,
      default="hour",
      descr=r"""for a \xmlNode{CashFlow} with \xmlAttr{type} \xmlString{repeating},
                indicates whether the CashFlow repeats every time step (\xmlString{hour})
                or every cycle (\xmlString{year})). Generally, CashFlows such as fixed
                operations and maintenance costs are per-cycle, whereas variable costs
                such as fuel and maintenance as well as sales are repeated every time step.""",
    )

    cls.addParam(
      "depreciate",
      param_type=InputTypes.IntegerType, # type: ignore
      required=False,
      default=None, # type: ignore
      descr=r"""indicates the number of cycles over which this CashFlow should be
                depreciated. Depreciation schemes are assumed to be MACRS and available
                cycles are listed in the CashFlow submodule of RAVEN.""",
    )

    driver = InputData.parameterInputFactory(
      "driver",
      contentType=InputTypes.FloatOrIntType,
      descr=r"""
      indicates the main driver for this CashFlow, such as the number of
      units sold or the size of the constructed unit. Corresponds to $D$
      in the CashFlow equation.
      """,
    )
    cls.addSub(driver)

    reference_price = InputData.parameterInputFactory(
      "reference_price",
      contentType=InputTypes.FloatOrIntType,
      descr=r"""indicates the cash value of the reference number of units sold.
                corresponds to $\alpha$ in the CashFlow equation. If \xmlNode{reference_driver}
                is 1, then this is the price-per-unit for the CashFlow.""",
    )

    levelized_cost = InputData.parameterInputFactory(
      "levelized_cost",
      strictMode=True,
      descr=r"""indicates whether HERON and TEAL are meant to solve for the levelized
                price related to this cashflow.""",
    )

    reference_price.addSub(levelized_cost)
    cls.addSub(reference_price)

    reference_driver = InputData.parameterInputFactory(
      "reference_driver",
      contentType=InputTypes.FloatOrIntType,
      descr=r"""determines the number of units sold to which the \xmlNode{reference_price}
                refers. Corresponds to $\prime D$ in the CashFlow equation.""",
    )
    cls.addSub(reference_driver)

    x = InputData.parameterInputFactory(
      "scaling_factor_x",
      contentType=InputTypes.FloatType,
      descr=r"""determines the scaling factor for this CashFlow. Corresponds to
                $x$ in the CashFlow equation. If $x$ is less than one, the per-unit
                price decreases as the units sold increases above the \xmlNode{reference_driver},
                and vice versa.""",
    )
    cls.addSub(x)

    return cls

